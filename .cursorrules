# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- The LEN function in audio_tools.py doesn't need the 'sr' parameter as it directly uses torchaudio.info() to get the native sample rate
- When updating a project from pip to uv, ensure you update installation instructions in README and provide uv installation commands for different platforms
- Detailed docstrings in Google format for audio processing functions should include Args, Returns, and Raises sections with all parameter descriptions
- When migrating from requirements.txt to pyproject.toml, include the script entry point in project.scripts and update installation instructions to use '-e' flag for development mode
- When implementing a multi-agent system with Pydantic AI, use Agent class with deps_type and result_type for proper type safety
- The Gemini 2.0 Flash model is a good default for AI agents that need to balance performance and speed
- Use pydantic-ai decorators (@agent.system_prompt, @agent.tool) to create well-structured agent interactions
- When refactoring a monolithic system to a multi-agent architecture, use a coordinator class to manage the workflow

# Scratchpad

## Multi-Agent Audio Processing System Refactoring

Task: Refactor the existing audio processing system to use a multi-agent architecture with Pydantic AI.

[X] Create a basic structure for the multi-agent system
  - Created ./audio_editor/agents directory structure
  - Set up __init__.py files for proper packaging

[X] Define Pydantic models for the multi-agent system
  - Created models.py with AudioPlan, PlanStep, ExecutionResult, etc.
  - Used Pydantic BaseModel with proper Field descriptions

[X] Set up dependency classes for agents
  - Created dependencies.py with context and agent-specific dependencies
  - Implemented AudioProcessingContext with tool collection

[X] Implement the Planner Agent
  - Created planner.py with Agent definition and system prompts
  - Added tools for plan generation, updating, and replanning
  - Implemented proper typing with RunContext

[X] Implement the Executor Agent
  - Created executor.py with code generation and refinement tools
  - Added error handling and retry mechanisms
  - Set up context-aware system prompts

[X] Create the MCP for code execution
  - Implemented MCPCodeExecutor class for safe code execution
  - Added code parsing and validation
  - Created detailed error reporting

[X] Build the coordinator to manage workflow
  - Created coordinator.py to orchestrate the agents
  - Implemented the processing loop with plan tracking
  - Added checkpointing for resilience

[X] Create command-line interface
  - Implemented main.py with argument parsing
  - Added helpful options including transcript support
  - Preserved backward compatibility

[X] Update project configuration
  - Updated pyproject.toml with new entry points
  - Added packages to setuptools configuration
  - Kept legacy entry point for backward compatibility

[X] Update documentation
  - Updated README.md with multi-agent system details
  - Added command-line argument descriptions
  - Explained the new architecture benefits

Key improvements in the refactored system:
1. Separation of concerns between planning and execution
2. Better error handling and recovery
3. Structured data with Pydantic validation
4. Improved code generation with dedicated Executor Agent
5. Type safety through the entire system
6. Better resilience through checkpointing 

## Test Script Generation for Multi-Agent Audio Processing System

Task: Create comprehensive test scripts for the multi-agent audio processing system.

Testing Strategy:
1. Unit tests for individual components
2. Integration tests for agent interactions
3. End-to-end tests for complete workflows
4. Mock tests for external dependencies

[X] Create test directory structure and configuration
  - Created tests/unit, tests/integration, tests/e2e, tests/fixtures directories
  - Added conftest.py with shared fixtures and utilities

[X] Implement unit tests for models and dependencies
  - Created test_models.py for Pydantic model testing
  - Created test_dependencies.py for dependency class testing
  - Added comprehensive validation tests

[X] Implement unit tests for MCP
  - Created test_mcp.py for Master Control Program
  - Added tests for code parsing, execution, and error handling
  - Added tests for output handling

[X] Create integration tests for agent interactions
  - Created test_agent_interactions.py
  - Added tests for Planner-Executor interaction
  - Added tests for error recovery flow
  - Added tests for checkpoint recovery

[X] Create end-to-end test cases
  - Created test_audio_processing.py
  - Added basic workflow tests
  - Added complex processing chain tests
  - Added error recovery tests
  - Added transcript handling tests
  - Added concurrent processing tests

[X] Add test utilities and fixtures
  - Added sample audio generation
  - Added context creation helpers
  - Added tool definition fixtures
  - Added plan and dependency fixtures

[X] Update documentation with testing instructions
  - Added testing section to README.md
  - Documented test structure and organization
  - Added instructions for running tests
  - Added guidelines for writing new tests

Task completed! The test suite now provides comprehensive coverage of the multi-agent audio processing system, with:
- Unit tests for all major components
- Integration tests for agent interactions
- End-to-end tests for complete workflows
- Reusable fixtures and utilities
- Clear documentation and guidelines

Next steps could include:
1. Adding more specific test cases for audio processing tools
2. Implementing performance benchmarks
3. Adding stress tests for concurrent processing
4. Setting up continuous integration

Key test coverage areas:
1. Model validation and constraints
2. Agent interaction patterns
3. Error handling and recovery
4. Checkpoint system
5. Concurrent processing
6. End-to-end workflows 